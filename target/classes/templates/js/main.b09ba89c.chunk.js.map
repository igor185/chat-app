{"version":3,"sources":["components/Header/index.tsx","components/ChatList/ChatElem/index.tsx","redux/constants.ts","redux/actions.ts","components/ChatList/index.tsx","components/Chat/index.tsx","App.tsx","serviceWorker.ts","redux/saga.ts","redux/reducer.ts","configStore.ts","index.tsx"],"names":["Header","react_default","a","createElement","className","index_es","icon","faBars","faSearch","faSignOutAlt","ChatElem","props","name","date","message","FETCH_CHATS","FETCH_CHATS_DONE","fetchChats","type","types","connect","state","chats","dispatch","actions","bindActionCreators","useEffect","map","elem","ChatList_ChatElem","id","name_user1","time","Chat","style","background","components_Header","components_ChatList","App","components_Chat","Boolean","window","location","hostname","match","watchSaga","action","res","regenerator_default","wrap","_context","prev","next","fetch","sent","json","put","payload","Object","objectSpread2","t0","console","log","stop","_marked","_context2","takeLatest","_marked2","initialState","user","reducer","arguments","length","undefined","store","middlewareSaga","createSagaMiddleware","createStore","composeWithDevTools","applyMiddleware","run","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b09ba89c.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./styles.sass\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faBars, faSearch, faSignOutAlt} from \"@fortawesome/free-solid-svg-icons\";\n\nconst Header = () => {\n\n\n    return (\n        <div className=\"header-wrap\">\n            <div className=\"left-side\">\n                <div className=\"icon-wrap\">\n                    <FontAwesomeIcon icon={faBars}/>\n                </div>\n                <div className=\"icon-wrap\">\n                    <FontAwesomeIcon icon={faSearch}/>\n                </div>\n            </div>\n            <div className=\"right-size\">\n                <div className=\"icon-wrap\">\n                    <FontAwesomeIcon icon={faSignOutAlt}/>\n                </div>\n            </div>\n\n        </div>\n    )\n};\n\n\nexport default Header;","import React from 'react';\nimport \"./styles.sass\"\nexport interface IChatElem {\n    id: number;\n    name: string;\n    date: string;\n    message: string;\n}\n\nconst ChatElem = (props: IChatElem) => {\n    const {name, date, message} = props;\n    return (\n        <div className=\"chat-elem-wrap\">\n            <div className=\"first-line\">\n                <div className=\"name-wrap\">{name}</div>\n                <div className=\"date-wrap\">{date}</div>\n            </div>\n            <div className=\"second-line\">\n                <div className=\"message-wrap\">{message}</div>\n            </div>\n        </div>\n    )\n};\n\n\nexport default ChatElem;","export const FETCH_CHATS = \"FETCH_CHATS\";\nexport const FETCH_CHATS_DONE = \"FETCH_CHATS_DONE\";","import * as types from \"./constants\";\nexport const fetchChats = () => ({\n    type: types.FETCH_CHATS\n});\n","import ChatElem from \"./ChatElem\";\nimport React, {useEffect} from \"react\";\nimport \"./styles.sass\";\nimport {bindActionCreators} from \"redux\";\nimport * as actions from \"../../redux/actions\";\nimport {connect} from \"react-redux\";\nimport {IChat} from \"../../model/IApp\";\n\nconst mapStateToProps = (state: any): any => ({\n    chats: state.chats\n});\n\nconst mapDispatchToProps = (dispatch: any) => ({\n    actions: bindActionCreators(actions, dispatch)\n});\n\ninterface IChatListProps{\n    actions: typeof actions;\n    chats: IChat[];\n}\nconst ChatList = (props: IChatListProps) => {\n    useEffect(() => {\n        props.actions.fetchChats();\n    }, [props.actions]);\n\n    return (\n        <div className=\"chat-list-wrap\">\n            {props.chats.map(elem => <ChatElem id={elem.id} name={elem.name_user1} date={elem.time} message={elem.message}/>)}\n        </div>\n    )\n};\n\n\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(ChatList);","import React from 'react';\nimport './styles.sass';\nimport Header from \"../Header\";\nimport ChatList from \"../ChatList\";\n\nconst Chat = (props: any) => {\n    return (\n        <div className=\"main-wrapper\">\n            <div style={ {background: \"white\"} }>\n                    <Header />\n                <div className=\"content-wrap\">\n                    <ChatList {...props} />\n                </div>\n            </div>\n        </div>\n    )\n};\n\nexport default Chat;","import React from \"react\";\nimport \"./App.css\";\nimport Chat from \"./components/Chat\";\n\nconst App: React.FC = () => {\n\n  return (\n    <div className=\"App\">\n      <Chat />\n    </div>\n  );\n};\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { takeLatest, put } from \"redux-saga/effects\";\nimport * as types from \"./constants\";\n\nfunction* fetchChats(action: any) {\n    try{\n        let url = '/api/chat-list';\n        let res = yield fetch(url);\n        res = yield res.json();\n        yield put({type: types.FETCH_CHATS_DONE, payload: { ...res }})\n    }catch (e) {\n        console.log(e);\n    }\n}\n\nexport function* watchSaga() {\n    yield takeLatest(types.FETCH_CHATS, fetchChats);\n}","import IApp, {IUser} from './../model/IApp'\nimport IAction from './../model/IAction'\nimport * as types from './constants';\n\nconst initialState: IApp = {\n    chats: [],\n    user: null as unknown as IUser\n};\n\nexport function reducer (state: IApp = initialState, action: IAction): IApp {\n    switch(action.type) {\n        case types.FETCH_CHATS_DONE:\n            return {\n                ...state,\n                chats: action.payload.chats\n            };\n        default:\n            return state;\n    }\n} ","import { createStore, applyMiddleware } from \"redux\";\nimport { watchSaga } from \"./redux/saga\";\nimport { reducer } from \"./redux/reducer\";\nimport createSagaMiddleware from \"redux-saga\";\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nconst store = () => {\n  const middlewareSaga = createSagaMiddleware();\n  const store = createStore(reducer, composeWithDevTools(\n    applyMiddleware(middlewareSaga)\n  ));\n  middlewareSaga.run(watchSaga);\n  return store;\n};\n\nexport default store();\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { Provider } from \"react-redux\";\nimport store from \"./configStore\";\n\nReactDOM.render(\n    <Provider store={store}>\n    <App />\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}