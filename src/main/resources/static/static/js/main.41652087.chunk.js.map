{"version":3,"sources":["redux/constants.ts","redux/actions.ts","components/Header/index.tsx","components/ChatList/ChatElem/index.tsx","components/ChatList/index.tsx","components/Message/Input/index.tsx","components/Message/MessageItem.tsx","components/Message/MessageList.tsx","components/ChatPage/index.tsx","components/Chat/index.tsx","App.tsx","serviceWorker.ts","var/routers.ts","redux/saga.ts","redux/reducer.ts","configStore.ts","index.tsx"],"names":["FETCH_CHATS","FETCH_CHATS_DONE","FETCH_MESSAGES","FETCH_MESSAGES_DONE","TOGGLE_PANEL","fetchChats","type","types","fetchMessages","chatId","payload","id","togglePanel","connect","state","dispatch","actions","bindActionCreators","props","react_default","a","createElement","className","onClick","index_es","icon","faBars","faSearch","faSignOutAlt","ChatElem","name","message","date","Comment","Group","Avatar","src","Content","Author","as","Metadata","Text","chatList","console","log","useEffect","data","Fragment","Input","placeholder","fluid","Divider","elements_Header_Header","map","elem","ChatList_ChatElem","key","user","time","chat","MessageInput","MessageItem","Actions","Action","MessageList","Message_MessageItem","isOpen","isFetching","Loader","active","inline","Message_MessageList","Message_Input","showPanel","style","background","components_Header","components_ChatList","components_ChatPage","App","components_Chat","Boolean","window","location","hostname","match","prefix","CHAT_LIST","concat","CHAT_MESSAGES","watchSaga","action","res","regenerator_default","wrap","_context","prev","next","fetch","sent","json","put","t0","stop","_marked","_context2","_marked2","_context3","takeLatest","_marked3","initialState","reducer","arguments","length","undefined","Object","objectSpread2","store","middlewareSaga","createSagaMiddleware","createStore","composeWithDevTools","applyMiddleware","run","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.41652087.chunk.js","sourcesContent":["export const FETCH_CHATS = \"FETCH_CHATS\";\nexport const FETCH_CHATS_DONE = \"FETCH_CHATS_DONE\";\n\nexport const FETCH_MESSAGES = \"FETCH_MESSAGES\";\nexport const FETCH_MESSAGES_DONE = \"FETCH_MESSAGES_DONE\";\n\nexport const TOGGLE_PANEL = \"TOGGLE_PANEL\";","import * as types from \"./constants\";\nexport const fetchChats = () => ({\n    type: types.FETCH_CHATS\n});\n\nexport const fetchMessages = (chatId: number) => ({\n    type: types.FETCH_MESSAGES,\n    payload: {\n        id: chatId\n    }\n});\n\nexport const togglePanel = () => ({\n    type: types.TOGGLE_PANEL\n});\n","import React from \"react\";\nimport \"./styles.sass\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faBars, faSearch, faSignOutAlt} from \"@fortawesome/free-solid-svg-icons\";\nimport IApp from \"../../model/IApp\";\nimport {bindActionCreators} from \"redux\";\nimport * as actions from \"../../redux/actions\";\nimport {connect} from \"react-redux\";\n\nconst Header = (props: any) => {\n\n\n    return (\n        <div className=\"header-wrap\">\n            <div className=\"left-side\">\n                <div className=\"icon-wrap\" onClick={() => props.actions.togglePanel()}>\n                    <FontAwesomeIcon icon={faBars}/>\n                </div>\n                <div className=\"icon-wrap\">\n                    <FontAwesomeIcon icon={faSearch}/>\n                </div>\n            </div>\n            <div className=\"right-size\">\n                <div className=\"icon-wrap\">\n                    <FontAwesomeIcon icon={faSignOutAlt}/>\n                </div>\n            </div>\n\n        </div>\n    )\n};\n\n// togglePanel\nconst mapStateToProps = (state: IApp): any => ({});\n\nconst mapDispatchToProps = (dispatch: any) => ({\n    actions: bindActionCreators(actions, dispatch)\n});\n\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(Header);\n","import React from 'react';\nimport \"./styles.sass\"\nimport {Comment} from \"semantic-ui-react\";\n\nexport interface IChatElem {\n    id: number;\n    name: string;\n    date: string;\n    message: string;\n    onClick: (id: number) => void;\n}\n\nconst ChatElem = (props: any) => {\n    const {name, date, message, id} = props;\n    return (\n        <div className=\"chat-elem-wrap\" onClick={() => props.onClick(id)}>\n            <Comment.Group>\n                <Comment>\n                    <Comment.Avatar src='https://react.semantic-ui.com/images/avatar/small/joe.jpg' />\n                    <Comment.Content>\n                        <Comment.Author as='a'>{name}</Comment.Author>\n                        <Comment.Metadata>\n                            <div>Today at 5:42PM</div>\n                        </Comment.Metadata>\n                        <Comment.Text>{message.message}</Comment.Text>\n                    </Comment.Content>\n                </Comment>\n                </Comment.Group>\n        </div>\n    )\n};\n\n\nexport default ChatElem;","import ChatElem from \"./ChatElem\";\nimport React, {useEffect} from \"react\";\nimport \"./styles.sass\";\nimport {bindActionCreators} from \"redux\";\nimport * as actions from \"../../redux/actions\";\nimport {connect} from \"react-redux\";\nimport IApp, {IChatList, IChatView} from \"../../model/IApp\";\nimport {Input, Divider, Header} from \"semantic-ui-react\";\n\nconst mapStateToProps = (state: IApp): any => ({\n    chatList: state.chatList\n});\n\nconst mapDispatchToProps = (dispatch: any) => ({\n    actions: bindActionCreators(actions, dispatch)\n});\n\ninterface IChatListProps {\n    actions: typeof actions;\n    chatList: IChatList;\n    chat: IChatView\n}\n\nconst ChatList = (props: IChatListProps) => {\n    console.log(props);\n    useEffect(() => {\n        if (!props.chatList.data)\n            props.actions.fetchChats();\n    }, [props.actions]);\n\n    return (\n        <>\n\n           <div className=\"chat-list-wrap\">\n               <Input placeholder='Search...' fluid/>\n               <Divider />\n               <Header as='h3'>Chats</Header>\n                {props.chatList.data && props.chatList.data.map(elem => <ChatElem key={elem.id} id={elem.id}\n                                                                                  name={elem.user.name}\n                                                                                  date={elem.time}\n                                                                                  message={elem.message}\n                                                                                  onClick={(id: number) => props.actions.fetchMessages(elem.chat.id)}/>)}\n            </div>\n        </>\n    )\n};\n\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(ChatList);","import React from 'react';\nimport { Input } from 'semantic-ui-react'\n\n\nexport const MessageInput = () => {\n    return <Input placeholder='Type a message...' fluid/>\n};\n\n\n\nexport default MessageInput;","import {Comment} from \"semantic-ui-react\";\nimport React from \"react\";\n\n\nexport const MessageItem = () => {\n\n\n    return (<Comment>\n        <Comment.Avatar src='https://react.semantic-ui.com/images/avatar/small/joe.jpg'/>\n        <Comment.Content>\n            <Comment.Author as='a'>Matt</Comment.Author>\n            <Comment.Metadata>\n                <div>Today at 5:42PM</div>\n            </Comment.Metadata>\n            <Comment.Text>How artistic!</Comment.Text>\n            <Comment.Actions>\n                <Comment.Action>Reply</Comment.Action>\n            </Comment.Actions>\n        </Comment.Content>\n    </Comment>)\n};\n\n\n\nexport default MessageItem;","import MessageItem from \"./MessageItem\";\nimport React from \"react\";\n\n\nexport const MessageList = () => {\n\n\n\n    return <> {[{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}].map(elem => <MessageItem {...elem as any}/>) }</>\n};\n\n\n\nexport default MessageList;","import React from 'react';\nimport {connect} from \"react-redux\";\nimport IApp from \"../../model/IApp\";\nimport {bindActionCreators} from \"redux\";\nimport * as actions from \"../../redux/actions\";\nimport {Header, Loader, Comment} from 'semantic-ui-react'\nimport './styles.sass'\nimport MessageInput from \"../Message/Input\";\nimport MessageList from \"../Message/MessageList\";\n\n\nconst ChatPage = (props: any) => {\n\n\n    return (\n        <div className=\"chat-page-wrapper\">\n            {props.chat.isOpen ? (\n                props.chat.isFetching ?\n                    (<div className=\"loader-wrap\">\n                        <Loader active inline='centered'/>\n                    </div>) :\n                    (\n                        <>\n                            <div className=\"messages-wrap\">\n                                <Comment.Group>\n                                    <MessageList />\n                                </Comment.Group>\n                            </div>\n                            <div className=\"input-wrap\">\n                                <MessageInput />\n                            </div>\n                        </>\n                    )\n            ) : (\n                \"close\"\n            )}\n        </div>\n    )\n};\n\n\nconst mapStateToProps = (state: IApp): any => ({\n    chat: state.chat\n});\n\nconst mapDispatchToProps = (dispatch: any) => ({\n    actions: bindActionCreators(actions, dispatch)\n});\n\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(ChatPage);\n","import React from 'react';\nimport './styles.sass';\nimport Header from \"../Header\";\nimport ChatList from \"../ChatList\";\nimport ChatPage from \"../ChatPage\";\nimport IApp from \"../../model/IApp\";\nimport {bindActionCreators} from \"redux\";\nimport * as actions from \"../../redux/actions\";\nimport {connect} from \"react-redux\";\n\nconst Chat = (props: any) => {\n    console.log(props);\n    return (\n        <div className=\"main-wrapper\">\n            <div style={ {background: \"white\"} }>\n                    <Header />\n                <div className=\"content-wrap\">\n                    {props.showPanel &&\n                    <ChatList {...props} />}\n                    <ChatPage />\n                </div>\n            </div>\n        </div>\n    )\n};\n\nconst mapStateToProps = (state: IApp): any => ({\n    showPanel: state.showPanel\n});\n\nconst mapDispatchToProps = (dispatch: any) => ({\n    actions: bindActionCreators(actions, dispatch)\n});\n\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(Chat);","import React from \"react\";\nimport \"./App.css\";\nimport Chat from \"./components/Chat\";\nimport 'semantic-ui-css/semantic.min.css'\n\nconst App: React.FC = () => {\n\n    return (\n        <div className=\"App\">\n            <Chat />\n        </div>\n    );\n};\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const prefix = \"http://localhost:8080\";\n\n\nexport const CHAT_LIST = `${prefix}/chats`;\nexport const CHAT_MESSAGES = `${prefix}/chat/`;","import {takeLatest, put} from \"redux-saga/effects\";\nimport * as types from \"./constants\";\nimport {CHAT_LIST, CHAT_MESSAGES} from \"../var/routers\";\n\nfunction* fetchChats(action: any) {\n    try {\n        let res = yield fetch(CHAT_LIST);\n        res = yield res.json();\n        yield put({type: types.FETCH_CHATS_DONE, payload: res})\n    } catch (e) {\n        console.log(e);\n    }\n}\n\nfunction* fetchMessages(action: any) {\n    try {\n        let res = yield fetch(CHAT_MESSAGES + action.payload.id);\n        res = yield res.json();\n        yield put({type: types.FETCH_MESSAGES_DONE, payload: res})\n    } catch (e) {\n        console.log(e);\n    }\n}\n\nexport function* watchSaga() {\n    yield takeLatest(types.FETCH_CHATS, fetchChats);\n    yield takeLatest(types.FETCH_MESSAGES, fetchMessages);\n}","import IApp, {IUser} from './../model/IApp'\nimport IAction from './../model/IAction'\nimport * as types from './constants';\n\nconst initialState: IApp = {\n    chatList: {\n        data: null,\n        isFetching: false\n    },\n    user: null as unknown as IUser,\n    chat: {\n        isFetching: false,\n        isOpen: true,\n        data: []\n    },\n    showPanel: true\n};\n\nexport function reducer (state: IApp = initialState, action: IAction): IApp {\n    switch(action.type) {\n        case types.FETCH_CHATS:\n            return {\n                ...state,\n                chatList: {\n                    ...state.chatList,\n                    isFetching: true\n                }\n            };\n        case types.TOGGLE_PANEL:\n            return {\n                ...state,\n                showPanel: !state.showPanel\n            }\n        case types.FETCH_CHATS_DONE:\n            return {\n                ...state,\n                chatList: {\n                    ...state.chatList,\n                    data: action.payload,\n                    isFetching: false,\n                }\n            };\n        case types.FETCH_MESSAGES:\n            return {\n                ...state,\n                chat: {\n                    ...state.chat,\n                    isFetching: true,\n                    isOpen: true\n                }\n            };\n        case types.FETCH_MESSAGES_DONE:\n            return {\n                ...state,\n                chat: {\n                    ...state.chat,\n                    data: action.payload,\n                    isFetching: false\n                }\n            };\n        default:\n            return state;\n    }\n} ","import { createStore, applyMiddleware } from \"redux\";\nimport { watchSaga } from \"./redux/saga\";\nimport { reducer } from \"./redux/reducer\";\nimport createSagaMiddleware from \"redux-saga\";\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nconst store = () => {\n  const middlewareSaga = createSagaMiddleware();\n  const store = createStore(reducer, composeWithDevTools(\n    applyMiddleware(middlewareSaga)\n  ));\n  middlewareSaga.run(watchSaga);\n  return store;\n};\n\nexport default store();\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { Provider } from \"react-redux\";\nimport store from \"./configStore\";\n\nReactDOM.render(\n    <Provider store={store}>\n    <App />\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}